/// @file [Vector.hpp]
/// @author [Luca Williams]
/// @date [3/12/2025]
///
/// @note I pledge my word of honor tha tI have adbided by the
/// CSN Academic  Integrity Policy while completing this assignment.
///
/// @brief Implementation and header file for the Vector class
/// with a nested class of Iterator. We use Iterators to hide public
/// facing pointers.
///

#include <cassert>
#include <stdexcept>
#include <cstddef>
#include <iterator>
#include <initializer_list>
#include <iostream>
#ifndef VECTOR4_HPP
#define VECTOR4_HPP
// Type Aliases


template <class T>
class Vector {
public:
    class Iterator {

    public:
        using iterator_category = std::random_access_iterator_tag;
        using value_Type = T;
        using difference_type = std::ptrdiff_t;
        using pointer = T*;
        using reference = T&;
        // Default constructor
        Iterator(pointer p = nullptr) : m_ptr(p) {}

        // Dereference operators
        reference operator*() const {
            return *m_ptr;
        }
        pointer operator->()  const {
            return m_ptr;
        }

        // Increment and decrement operators (prefix and postfix)
        Iterator& operator++() {
            ++m_ptr;
            return *this;
        }
        Iterator operator++(int) {
            Iterator temp = *this;
            ++(*this);
            return temp;
        }
        Iterator& operator--() {
            --m_ptr;
            return *this;
        }
        Iterator operator--(int) {
            Iterator temp = *this;
            --(*this);
            return temp;
        }

        // Arithmetic operators
        Iterator operator+(difference_type n) const {
            return iterator(m_ptr + n);
        }
        Iterator operator-(difference_type n) const {
            return Iterator(m_ptr - n);
        }
        difference_type operator-(const Iterator& other) const {
            return m_ptr - other.m_ptr;
        }


        // Compound assignment operator
        Iterator& operator+=(difference_type n) {
            m_ptr += n;
            return *this;
        }
        Iterator& operator-=(difference_type n) {
            m_ptr -= n;
            return *this;
        }

        // Comparison operators
        bool operator==(const Iterator& other) const {
            return m_ptr == other.m_ptr;
        }
        bool operator!=(const Iterator& other) const {
            return m_ptr != other.m_ptr;
        }
        bool operator<(const Iterator& other) const {
            return m_ptr < other.m_ptr;
        }
        bool operator<=(const Iterator& other) const {
            return m_ptr <= other.m_ptr;
        }
        bool operator>(const Iterator& other) const {
            return m_ptr > other.m_ptr;
        }
        bool operator>=(const Iterator& other) const {
            return m_ptr >= other.m_ptr;
        }

        // Subscript operator
        reference operator[](difference_type n) const {
            return *(m_ptr + n);
        }
    private:
        pointer m_ptr;
    };
    using value_type      = T;
    using size_type       = size_t;
    using reference       = value_type&;
    using const_reference = const value_type&;
    using pointer         = value_type*;
    using const_pointer   = const value_type*;
    using iterator        = Iterator;
    // Constructors and Destructor
    /**
     *  @brief Constructs the container with count copies of elements.
     *  @param count The number of elements to create in the vector
     *  (defaults to zero).
     *
     *  Note: When constructed with a count, the vector's size and capacityare
     *  both set to count, and each element is default-constructed.
     */
    explicit Vector(size_type count = 0);

    /**
     *  @brief Copy constructor.
     *  @param other The Vector object to copy.
     */
    Vector(const Vector& other);
    /**
    *  @brief Copy constructor
    */
    Vector(Vector&& other);
    /**
     * @brief Constructs the vector using an init list.
     * @param ilist An init list containing elements for the vector.
     */
    explicit Vector(const std::initializer_list<value_type>& ilist);
    /**
     *  @brief Virtual destructor.
     */
    virtual ~Vector();
    // Copy- Range
    template <class InputIt, class OutputIt>
    OutputIt copy_range(InputIt first, InputIt last, OutputIt d_first) {
        while (first != last) {
            *d_first++ = *first++;
        }

        return d_first;
    }
    // Element Access

    /**
     *  @brief Returns a reference to the element at the specified position.
     *  @param pos The position of the element.
     *  @return A reference to the element at position pos.
     *  @pre pos must be less than size().
     */
    reference at(size_type pos);
    const_reference at(size_type pos) const;

    /**
     *  @brief Returns a reference to the first element.
     *  @return A reference to the first element.
     *  @pre The vector must not be empty.
     */
    reference front();
    const_reference front() const;

    /**
     *  @brief Returns a reference to the last element.
     *  @return A reference to the last element.
     *  @pre The vector must not be empty.
     */
    reference back();
    const_reference back() const;

    // Iterators

    /**
     *  @brief Returns a pointer to the first element.
     *  @return A pointer to the first element.
     */
    iterator begin() {
        return iterator(m_data);
    }
    const_pointer begin() const {
        return m_data;
    }

    /**
     *  @brief Returns a pointer to one past the last valid element.
     *  @return A pointer to one past the last valid element.
     */
    iterator end() {
        return iterator(m_data + m_count);
    }
    const_pointer end() const {
        return m_data + m_count;
    }

    // Capacity

    /**
     *  @brief Checks whether the vector is empty.
     *  @return True if the vector is empty; otherwise, false.
     */
    bool empty() const;

    /**
     *  @brief Returns the number of valid elements in the vector.
     *  @return The number of valid elements.
     */
    size_type size() const;

    /**
     *  @brief Returns the capacity of the vector.
     *  @return The capacity of the vector.
     */
    size_type capacity() const;

    // Modifiers

    /**
     *  @brief Clears the vector.
     *  Sets the size (m_count) to 0 without deallocating the memory.
     */
    void clear();

    /**
     *  @brief Adds an element to the end of the vector.
     *  If the vector's size equals its capacity, a new dynamic array with
     *  double the current capacity is allocated, the existing elements are
     *  copied using pointer-based iteration, the old memory is deallocated,
     *  and then the element is added.
     *  @param value The value to add.
     */
    void push_back(const value_type& value);

    /**
     *  @brief Removes the last element of the vector.
     *  @pre The vector must not be empty.
     */
    void pop_back();

    // Inserts a value at the specified position in the vector.
    // It shifts the existing
    // elements to make space for the new value, adjusting the vector's size
    // if necessary.
    // Returns an iterator (pointer)tothepositionwhere the value was inserted.

    iterator insert(iterator pos, const_reference value);

    // Erases the element at the specified position in the vector.
    // It shifts the remaining
    // elements to fill the gap left by the removed element,
    // adjusting the vector's size.
    // Returns an iterator (pointer) to the element following the one that was
    // erased.

    iterator erase(iterator pos);


    // =======================================================================

    // Copy assignment operator:
    // Assigns the contents of another Vector to this Vector.
    // If the current object isnotthe same as the other object, it deallocates
    // the existing data, allocatesnewmemory, and copies the elements from the
    // other vector into this one.

    Vector& operator=(const Vector& other);

    // Move assignment operator: Transfersthe resources of a temporary (rvalue)
    // Vector to this Vector, without copying the elements. It releases the
    // current resources and takes ownership of the other vector's data.

    Vector& operator=(Vector&& other) noexcept;

    // Subscript operator: Provides non-const access to an element at a given
    // index in the vector. This operator allows modification of the element.

    reference operator[](size_type index);

    // Const subscript operator:
    // Provides read-only access to an element at a given
    // index in the vector.
    // This operator does not allow modification of the element.

    const_reference operator[](size_type index) const;

    // Addition assignment operator:Concatenatesanother Vector to this Vector.
    // It appends all elements of the other vector to the current vector,
    // adjusting
    // its size and capacity if necessary.

    Vector& operator+=(const Vector& other);


private:
    size_type m_count;     ///< Number of valid elements.
    size_type m_capacity;  ///< Allocated capacity of the vector.
    pointer   m_data;      ///< Pointer to the dynamic array.
};  // class Vector

/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
// Compares two vectors for equality. Returns true if the two vectors have the
// same size
// and identical elements in the same order, false otherwise.
template<class T>
bool equal(const Vector<T>& lhs, const Vector<T>& rhs);

// Compares two vectors for equality using the equality operator.
// Returns true if the
// two vectors are equal (same size and same elements in the same order),
// false otherwise.
template<class T>
bool operator==(const Vector<T>& lhs, const Vector<T>& rhs);

// Concatenates two vectors and returns a new vector
// containing all elements of the
// left-hand side vector followed by all elements of the right-hand
// side vector.
template<class T>
Vector<T> operator+(const Vector<T>& lhs, const Vector<T>& rhs);



/**
     *  @brief Constructs the container with count copies of elements.
     *  @param count The number of elements to create in the vector
     *  (defaults to zero).
     *
     *  Note: When constructed with a count, the vector's size and capacityare
     *  both set to count, and each element is default-constructed
     */
template <class T>
Vector<T>::Vector(size_type count)
    : m_count(count), m_capacity(count), m_data(new value_type[count]) {
    pointer dest = m_data;
    const_pointer vfv = m_data + m_count;

    while (dest != vfv) {
        *dest++ = T{};
    }
}
/**
    *  @brief Copy constructor.
    *  @param other The Vector object to copy.
    */
template <class T>
Vector<T>::Vector(const Vector<T>& other)
    : m_count(other.size()),
      m_capacity(other.capacity()),
      m_data(new value_type[other.capacity()] {}) {

    const_pointer pp = other.begin();

    pointer dest = m_data;

    while (pp != other.end()) {

        *dest = *pp;
        dest++;
        pp++;
    }

}
template <class T>
Vector<T>::Vector(Vector<T>&& other):
    m_count(other.m_count),
    m_capacity(other.m_capacity),
    m_data(other.m_data) {

    other.m_count = 0;
    other.m_capacity = 0;
    other.m_data = nullptr;
}

/**
 * @brief Constructs the vector using an init list.
 * @param ilist An init list containing elements for the vector.
 */
template <class T>
Vector<T>::Vector(const std::initializer_list<T>& ilist):
    m_count(ilist.size()), m_capacity(ilist.size()),
    m_data(new value_type[ilist.size()]) {
    pointer dest = m_data;
    const_pointer vfv = ilist.begin();

    for (size_type i = 0; i < ilist.size(); i++) {
        *dest = *vfv;
        dest++;
        vfv++;
    }

}
/**
     *  @brief Virtual destructor.
     */
template <class T>
Vector<T>::~Vector() {
    delete[] m_data;
    m_data = nullptr;
    m_capacity = 0;
    m_count = 0;

}
// Element Access
// Return a reference to the element at position pos (using pointer-based
// iteration internally).
/**
    *  @brief Returns a reference to the element at the specified position.
    *  @param pos The position of the element.
    *  @return A reference to the element at position pos.
    *  @pre pos must be less than size().
    */
template <class T>
typename Vector<T>::reference Vector<T>::at(size_type pos) {
    if (pos >= size()) {
        throw std::out_of_range("Vector::at()  -  index out of range");
    }

    return *(m_data + pos);
}
/**
*  @brief Returns a reference to the element at the specified position.
*  @param pos The position of the element.
*  @return A reference to the element at position pos.
*  @pre pos must be less than size().
*/
template <class T>
typename Vector<T>::const_reference Vector<T>::at(size_type pos) const {
    if (pos >= size()) {
        throw std::out_of_range("Vector::at()  -  index out of range");
    }

    return *(m_data + pos);
}

/**
     *  @brief Returns a reference to the first element.
     *  @return A reference to the first element.
     *  @pre The vector must not be empty.
     */
template <class T>
typename Vector<T>::reference Vector<T>::front() {
    if (empty()) {
        throw std::out_of_range("Vector<T>::front()  -  index out of range");
    }

    assert(m_count > 0);
    return *(m_data);
}
/**
 *  @brief Returns a reference to the first element.
 *  @return A reference to the first element.
 *  @pre The vector must not be empty.
 */
template <class T>
typename Vector<T>::const_reference Vector<T>::front() const {
    if (empty()) {
        throw std::out_of_range("Vector<T>::front()  -  index out of range");
    }

    return *(m_data);
}

/**
     *  @brief Returns a reference to the last element.
     *  @return A reference to the last element.
     *  @pre The vector must not be empty.
     */
template <class T>
typename Vector<T>::reference Vector<T>::back() {

    if (empty()) {
        throw std::out_of_range("Vector<T>::back()  -  index out of range");
    }

    return *(m_data + m_count - 1);

}
/**
     *  @brief Returns a reference to the last element.
     *  @return A reference to the last element.
     *  @pre The vector must not be empty.
     */
template <class T>
typename Vector<T>::const_reference Vector<T>::back() const {
    if (empty()) {
        throw std::out_of_range("Vector<T>::back()  -  index out of range");
    }

    return *(m_data + m_count - 1);
}


//    Capacity Functions
/**
     *  @brief Checks whether the vector is empty.
     *  @return True if the vector is empty; otherwise, false.
     */
template <class T>
bool Vector<T>::empty() const {
    return m_count == 0;
}
/**
     *  @brief Returns the number of valid elements in the vector.
     *  @return The number of valid elements.
     */
template <class T>
typename Vector<T>::size_type Vector<T>::size() const {
    return m_count;
}
/**
    *  @brief Returns the capacity of the vector.
    *  @return The capacity of the vector.
    */
template <class T>
typename Vector<T>::size_type Vector<T>::capacity() const {
    return m_capacity;
}
// Modifiers
/**
    *  @brief Clears the vector.
    *  Sets the size (m_count) to 0 without deallocating the memory.
    */
template <class T>
void Vector<T>::clear() {
    m_count = 0;
}
/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
typename Vector<T>::iterator
Vector<T>::insert(iterator pos, const_reference value) {
    // Precondition
    if (!(begin() <= pos && pos <= end())) {
        throw std::out_of_range("Vector<T>::insert  -  index out of range");
    }

    const ptrdiff_t index = pos - begin();
    push_back(value);
    pos = begin() + index;

    // shuffle elements right to make room for new value
    for (auto current = end() - 1; current > pos; --current) {
        *current = *(current - 1);
    }

    *pos = value;

    return pos;
}

/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
typename Vector<T>::iterator
Vector<T>::erase(iterator pos) {
    if (!(begin() <= pos && pos <= end())) {
        throw std::out_of_range("Vector<T>::erase  -  index out of range");
    }

    copy_range(pos + 1, end(), pos);

    --m_count;

    return pos;
}

/**
     *  @brief Adds an element to the end of the vector.
     *  If the vector's size equals its capacity, a new dynamic array with
     *  double the current capacity is allocated, the existing elements are
     *  copied using pointer-based iteration, the old memory is deallocated,
     *  and then the element is added.
     *  @param value The value to add.
     */
template <class T>
void Vector<T>::push_back(const value_type& value) {
    if (size() == capacity()) {
        const auto new_capacity = (m_capacity == 0) ? 1 : m_capacity * 2;
        const pointer new_data = new value_type[new_capacity];

        copy_range(begin(), end(), new_data);

        delete[] m_data;
        m_data = new_data;
        m_capacity = new_capacity;
    }

    // insert new element
    *(m_data + m_count) = value;
    ++m_count;
}


/**
    *  @brief Removes the last element of the vector.
    *  @pre The vector must not be empty.
    */
template <class T>
void Vector<T>::pop_back() {
    if (empty()) {
        throw std::underflow_error("Vector<T>::pop_back  -  index attempt to"
                                   "access enmpty array");
    }

    --m_count;

}
/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
Vector<T>& Vector<T>::operator=(Vector<T>&& other) noexcept {
    if ( this != &other ) {  //  Protect against self-assignment
        //  Clean up existing resources
        delete [] m_data;
        // Transferowenershipofdata from 'other'
        m_count = other.m_count;
        m_capacity  = other.m_capacity;
        m_data = other.m_data;
        // Leave 'other' in a valid, empty state
        other.m_count = 0;
        other.m_capacity = 0;
        other.m_data = nullptr;
    }

    return *this;
}

/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
Vector<T>& Vector<T>::operator=(const Vector<T>& other) {

    if (this != &other) {
        if (capacity() != other.capacity()) {
            // deallocate memory
            delete[] m_data;

            // allocate new memory
            m_capacity = other.capacity();
            m_data = new value_type[other.capacity()];
        }

        copy_range(other.begin(), other.end(), begin());

        m_count = other.size();
    }

    return *this;
}

/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */

template <class T>
Vector<T>& Vector<T>::operator+=(const Vector<T>& other) {

    const size_type read_capacity = size() + other.size();

    if (capacity() < read_capacity) {
        const pointer new_data = new value_type[read_capacity];

        copy_range(begin(), end(), new_data);

        delete[] m_data;
        m_data = new_data;
        m_capacity = read_capacity;

    }

    copy_range(other.begin(), other.end(), end());

    m_count += other.size();          // m_count update

    return *this;

}


/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
T& Vector<T>::operator[](size_type index) {

    return at(index);
}
/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
const T& Vector<T>::operator[](size_type index) const {

    return at(index);
}

/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
bool operator==(const Vector<T>& lhs, const Vector<T>& rhs) {
    bool EXIT_STATE = true;

    if (!equal(lhs, rhs)) {
        EXIT_STATE = false;
    }

    return EXIT_STATE;
}
/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
Vector<T> operator+(const Vector<T>& lhs, const Vector<T>& rhs) {
    Vector<T> Combined_vector(lhs.size() + rhs.size());  // New vector<
    // Copies the elements of the older vector
    // into the new vector
    auto dest = iteraator(Combined_vector.begin());
    const T *right = rhs.begin();
    const T *left = lhs.begin();

    while (left != lhs.end()) {
        *dest++ = *left++;
    }

    while (right != rhs.end()) {
        *dest++ = *right++;
    }

    return Combined_vector;
}
/**
 *  @brief Non-member function to compare two vectors for equality.
 *  @param lhs The left-hand side vector.
 *  @param rhs The right-hand side vector.
 *  @return True if the vectors are equal in size and content; otherwise false
 */
template <class T>
bool equal(const Vector<T>& lhs, const Vector<T>& rhs) {
    bool is_equal = lhs.size() == rhs.size();  // bool to verify size
    auto left = lhs.begin();    // First element of lhs
    auto right = rhs.begin();   // first element of rhs


    while (is_equal && left != lhs.end()){
        is_equal = *left++ == *right++;     // compare elements
        }
        return is_equal;        // return comparision
}

/**
 *  @file Vector.h
 *  @author
 *  @date
 *  @note I pledge my word of honor that I have complied with the
 *  CSN Academic Integrity Policy while completing this assignment.
 *  @brief This file declares the Vector class, which emulates the
 *  behavior of std::vector. It supports dynamic memory management,
 *  pointer-based iteration, and provides member functions for
 *  element access, capacity queries, and modifications.
 * @note I utilized ai to style my code. Chatgpt to be exact.
 */






#endif  // VECTOR3_HPP
