/**
 *  @file pa16.cpp
 *  @author TODO
 *  @date TODO
 *  @note I pledge my word of honor that I have complied with the
 *  CSN Academic Integrity Policy while completing this assignment.
 *  @brief TODO
 */

#include <algorithm>
#include <chrono>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>




/**
 *@brief Copies a range from a vector
 * @param first the iterator that at the beginning of the range
 * @param last the last iterator for the range
 * @param d_first The destination range we copy to
 */
template<class InputIt, class OutputIt>

OutputIt local_copy(InputIt first, InputIt last, OutputIt d_first) {
    for (; first != last; ++first, ++d_first) {
        *d_first = *first;
    }
    return d_first;
}

/**
 *  @brief Sorts the elements in the range [first, last) using bubble sort.
 *  @complexity O(n^2)
 * @param first - first iterator to begin
 * @param last - last iterator to end
 */
template <class RandomIt>
void bubble_sort(RandomIt first, RandomIt last) {
    if (first != last) {
        for (RandomIt i = first; i != last; ++i) { // Code from Kmess' example
            for (RandomIt j = first; j < last - (i - first) - 1; ++j) {
                RandomIt next = j;
                ++next;

                if (*next < *j) {
                    std::iter_swap(j, next);
                }
            }

        }
    }
}



/**
 *  @brief Sorts the elements in the range [first, last) using selection sort.
 *  @complexity O(n^2)
 * @param first - first iterator to begin
 * @param last - lat iterator to end
 */
template <class RandomIt>
void selection_sort(RandomIt first, RandomIt last) {
    if (first != last) {
       const auto less_than = [](const auto & a, const auto & b) {
            return a < b;
        };
        //  Lambda added
        for (RandomIt i = first; i != last; ++i) {
            RandomIt min_val = i;
            for (RandomIt j = i + 1; j != last; ++j) {
                if (less_than(*j, *min_val)) {  //  use lambda
                    min_val = j;
                }
            }
            if (min_val != i) {         // swap smallest with current element
                std::iter_swap(i, min_val);
            }
        }
    }
}

/**
 *  @brief Sorts the elements in the range [first, last) using insertion sort.
  template <class RandomI t>
  * @param first - first iterator to begin
  * @param last - last iterator to end
  *
  */
template <class RandomIt>
void insertion_sort(RandomIt first, RandomIt last) {
    if (first != last) {
       const auto greater_than = [](const auto & a, const auto & b) {
            return a > b;
        };
        // Lambda for greater or less than.
        for (RandomIt i = first + 1; i != last; ++i) {
           const auto key = *i;
            RandomIt j = i;
            while (j != first && greater_than(*(j - 1), key)) {
                *j = *(j - 1);
                --j;
            }
            *j = key;
        }
    }
}

/**
 *  @brief Performs a sequential search in the range [first, last).
 *  @complexity O(n)
 * @param first - first iterator to begin
 * @param last - last iterator to end
 * @param target - value we are looking for
 * @return iterator or last of not found
 */
template <class ForwardIt, class T>
ForwardIt seq_search(ForwardIt first, ForwardIt last, const T& target) {
    ForwardIt result = last;        // Assume not found

    for (; first != last; ++first) {
        if (*first == target && result == last) {
            result = first;       // found and update
        }
    }

    return result;
}

/**
 *  @brief Performs a binary search in the sorted range [first, last).
 *  @complexity O(log n)
 * @param first fist iterator to begin
 * @param last last iterator to end
 * @param target value searching for
 * @return iterator or alst if not found
 */
template <class RandomIt, class T>
RandomIt bin_search(RandomIt first, RandomIt last, const T& target) {
    RandomIt result = last;         // Assume not found

    while (first < last) {
       const RandomIt mid = first + (last - first) / 2;

        if (*mid == target && result == last) {
            result = mid;       // save found value
        }

        if (target < *mid) {
            last = mid;     // search left half
        } else {
            first = mid + 1;    // search right half
        }
    }

    return result;
}

/**
 *  @brief Measures and returns execution time in nanoseconds.
 * @param function - function to benchmark
 * @param args arguments to pass
 * @return execution time in nanoseconds
 */
template <class Func, class... Args>
int64_t benchmark(const Func& function, Args... args) {
    using namespace std::chrono;
    const auto start = high_resolution_clock::now();
    function(args...);
    const auto stop = high_resolution_clock::now();
    return duration_cast<nanoseconds>(stop - start).count();

}

/**
 *  @brief Generates a vector of random integers.
 *
 *  @param size The number of integers to generate.
 *  @return std::vector<int> containing randomly generated values.
 *
 *  TODO: Use Modern C++ facilities from <random> to implement this.
 *  - Create a random engine (e.g., std::mt19937)
 *  - Create a distribution (e.g., std::uniform_int_distribution)
 *  - Use the distribution and engine to populate the vector
 *
 *  Do not use srand() or rand(). Use <random> and modern C++ featuresinstead.
 */

std::vector<int> generate_random_vector(size_t size);

#ifndef PA16_SUPPRESS_MAIN
int main() {
    //const int not_present = -1;
    // TODO: Define the data sizes to test
    std::vector<size_t> data_sizes { 2000, 4000, 8000,
                                    16000, 32000, 64000, 128000 };

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int64_t> dist(1, 1'000'000);  //  range 1 to
    //  1,000,000

    std::vector<int64_t> data(128000);  //  preallocate storage

    for (auto& val : data) {
        val = dist(gen);
    }

    std::vector<int64_t> data_copy(128000);  // The copy vector
    std::cout <<
              "  Data Size |     Bubble |  Selection |  "
              "Insertion |  std::sort | Seq Search | Bin Search |"
              << std::endl;
    std::cout <<
              "-----------------------------------------------"
              "--------------------------------------------";




    for (size_t i = 0; i < data_sizes.size(); i++) {
        std::cout << std::endl << std::setw(11) << data_sizes.at(i) << " |";

        // This wouldn't look as ugly if I could just go a little past 80.
        // Give an inch take a mile though.

        data_copy.clear();      //  Clears the vector
        local_copy(data.begin(), (data.begin() +
                                        (static_cast<int>(data_sizes.at(i)))),
                                                           data_copy.begin());
        std::cout << std::fixed << std::setprecision(7) << std::setw(11)
                                    << static_cast<double>(benchmark([&]() {

            return selection_sort(data_copy.begin(), data_copy.end());

        }))/1e9;

        data_copy.clear();      //  Clears the vector
        local_copy(data.begin(), (data.begin() +
                                        (static_cast<int>(data_sizes.at(i)))),
                                                           data_copy.begin());
        std::cout << std::fixed << std::setprecision(7) << " |"
                    << std::setw(11) << static_cast<double>(benchmark([&]() {
            return insertion_sort(data_copy.begin(), data_copy.end());
        }))/1e9;


        data_copy.clear();      //  Clears the vector
        local_copy(data.begin(), (data.begin() +
                                        (static_cast<int>(data_sizes.at(i)))),
                                                           data_copy.begin());
        std::cout << std::fixed << std::setprecision(7) << " |"
        << std::setw(11) << static_cast<double>(benchmark([&]() {
            return bubble_sort(data_copy.begin(), data_copy.end());
        }))/1e9;


        local_copy(data.begin(), (data.begin() +
        (static_cast<int>(data_sizes.at(i)))),
                   data_copy.begin());
        std::cout << std::fixed << std::setprecision(7) << " |"
        << std::setw(11) << static_cast<double>(benchmark([&]() {
            return std::sort(data_copy.begin(), data_copy.end());
        }))/1e9;


        data_copy.clear();      //  Clears the vector
        local_copy(data.begin(), (data.begin() +
        (static_cast<int>(data_sizes.at(i)))),
                   data_copy.begin());
        std::cout << std::fixed << std::setprecision(7) << " |"
        << std::setw(11) << static_cast<double>(benchmark([&]() {
            return seq_search(data_copy.begin(), data_copy.end(), -1);
        }))/1e9;

        local_copy(data.begin(), (data.begin() +
        (static_cast<int>(data_sizes.at(i)))),
                   data_copy.begin());
        std::cout << std::fixed << std::setprecision(7) << " |"
        << std::setw(11) << static_cast<double>(benchmark([&]() {
            return bin_search(data_copy.begin(), data_copy.end(), -1);
        }))/1e9;


        std::cout  << std::setw(0   )  << " |";
    }
        std::cout << std::endl <<
              "------------------------------"
              "----------------------------------"
              "---------------------------" << std::endl;
    data_copy.clear();      //  Clears the vector
    return 0;
}
#endif  // PA16_SUPPRESS_MAIN

/* EOF */
